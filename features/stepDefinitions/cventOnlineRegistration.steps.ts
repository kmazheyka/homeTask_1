import { browser } from "protractor";
import { BrowserHacks } from "../../support/browserHacks";
import { EventPage } from "../pageObjects/event.page";
import chai = require('chai');

export = function cventSteps() {

    //Default cucumber timeout
    this.setDefaultTimeout(600 * 1000);

    //Loading browser hacks
    let browserHacks = new BrowserHacks;

    //Loading Event Page Object
    let event = new EventPage;

    //Unique identifier    
    let uniqueIndentifier: string;

    //Swagger API Caller
    let responseObject: any;
    const pingSnaplogic = require('request-promise');

    //Chai-as-Promised setup
    chai.use(require('chai-as-promised'));
    const expect = chai.expect;

    //Hooks
    this.Before(async () => {
        let d = new Date;
        uniqueIndentifier = `${await d.getFullYear()}${await d.getMonth()}${await d.getDate()}${await d.getHours()}${await d.getMinutes()}${await d.getSeconds()}0`;
        //For debugging in case of fails
        await console.log(`Your autogenerated unique e-mail is 'emsautomation${uniqueIndentifier}@mailinator.com'`);
    });

    this.After(async () => {
        await browserHacks.ClearBrowserData();
    });

    //Step Definitions

    //Single Attendee
    this.Given(/^a user navigates to Cvent to register for an event$/, async () => {
        //For debugging in case of fails
        //await console.log(`Your autogenerated unique e-mail is 'emsautomation${uniqueIndentifier}@mailinator.com'`);
        await browser.navigate().to(browser.baseUrl);
        await event.Loaded();
        await browser.navigate().to(browser.baseUrl);
        await event.Loaded();
        await event.StartRegister();
    });

    //Single Attendees with someone else
    this.Given(/^a user navigates to Cvent to register some else for an event$/, async () => {
        //For debugging in case of fails
        //await console.log(`Your autogenerated unique e-mail is 'emsautomation${uniqueIndentifier}@mailinator.com'`);
        await browser.navigate().to(browser.baseUrl);
        await event.Loaded();
        await browser.navigate().to(browser.baseUrl);
        await event.Loaded();
        await event.StartRegister();
    });

    //Single Attendee
    this.Then(/^enter the data in the registration form$/, async () => {
        await event.RegisterSingleAttendee(uniqueIndentifier);
    });

    //Book with someone else
    this.Then(/^enter the data in the registration form with someone else$/, async () => {
        await event.RegisterWithSomeoneElse(uniqueIndentifier);
    });


    this.Then(/^the transaction is processed by Cvent and SnapLogic$/, async () => {
        responseObject = await event.processEvent(uniqueIndentifier,"7f3130ae-87f4-48c2-a0b0-84b7250f3cf9");        
    });

    this.Then(/^verify the content of the Json$/, async () => {
        //Verify POST response with chai assertions

        //Booker section
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.primaryContact.fnm)).to.eventually.have.string(`firstName${uniqueIndentifier}`);
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.primaryContact.snm)).to.eventually.have.string(`lastName${uniqueIndentifier}`);
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.primaryContact.eml)).to.eventually.have.string(`emsautomation${uniqueIndentifier}@mailinator.com`);
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.primaryContact.phn)).to.eventually.have.string(`${uniqueIndentifier}`);
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.primaryContact.ali)).to.eventually.have.string(`Grand Hyatt Hotel`);
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.primaryContact.aci)).to.eventually.have.string(`London`);
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.primaryContact.ast)).to.eventually.have.string(`England`);
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.primaryContact.aco)).to.eventually.have.string(`GB`);
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.primaryContact.apo)).to.eventually.have.string(`EC4Y 8AX`);
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.primaryContact.ScreeningResult)).to.eventually.be.null;
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.primaryContact.title)).to.eventually.have.string(`Prof`);
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.primaryContact.cob)).to.eventually.have.string(`testCompany${uniqueIndentifier}`);
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.primaryContact.jobTitle)).to.eventually.have.string(`specialist${uniqueIndentifier}`);

        //Billing contact section
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.billingContact.fnm)).to.eventually.have.string(`firstName${uniqueIndentifier}`);
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.billingContact.snm)).to.eventually.have.string(`lastName${uniqueIndentifier}`);
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.billingContact.eml)).to.eventually.have.string(`emsautomation${uniqueIndentifier}@mailinator.com`);
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.billingContact.phn)).to.eventually.have.string(`${uniqueIndentifier}`);
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.billingContact.ali)).to.eventually.have.string(`Grand Hyatt Hotel`);
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.billingContact.aci)).to.eventually.have.string(`London`);
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.billingContact.ast)).to.eventually.have.string(`England`);
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.billingContact.aco)).to.eventually.have.string(`GB`);
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.billingContact.apo)).to.eventually.have.string(`EC4Y 8AX`);
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.billingContact.ScreeningResult)).to.eventually.be.null;
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.billingContact.title)).to.eventually.have.string(`Prof`);
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.billingContact.cob)).to.eventually.have.string(`testCompany${uniqueIndentifier}`);
        expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.billingContact.jobTitle)).to.eventually.have.string(`specialist${uniqueIndentifier}`);
    });
}