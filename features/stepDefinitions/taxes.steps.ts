import { browser } from "protractor";
import { BrowserHacks } from "../../support/browserHacks";
import { EventPage } from "../pageObjects/event.page";
import chai = require('chai');

export = function taxesSteps() {

    //Default cucumber timeout
    this.setDefaultTimeout(600 * 1000);

    //Loading browser hacks
    let browserHacks = new BrowserHacks;

    //Loading Event Page Object
    let event = new EventPage;

    //Shared variable for unique identifier    
    let uniqueIndentifier: string;

    //Swagger API Caller
    let responseObject: any;

    //Chai-as-Promised setup
    chai.use(require('chai-as-promised'));
    const expect = chai.expect;

    //Hooks
    this.Before(async () => {
        let d = new Date;
        uniqueIndentifier = `${await d.getFullYear()}${await d.getMonth()}${await d.getDate()}${await d.getHours()}${await d.getMinutes()}${await d.getSeconds()}2`;
        //For debugging in case of fails
        await console.log(`Your autogenerated unique e-mail is 'emsautomation${uniqueIndentifier}@mailinator.com'`);
    });

    this.After(async () => {
        await browserHacks.ClearBrowserData();
    });

    //Step Definitions

    //No Taxes Step
    this.Given(/^no tax has been set up in Cvent for any registraion product for an event$/, async () => {
        await console.log("Already setuped parameter in used events, but can be updated in future");
    });

    //United Kingdom Step
    this.Given(/^a Tax Name of United Kingdom VAT and a Tax code of SR has been set up in Cvent for any registraion product for an event$/, async () => {
        await console.log("Already setuped parameter in used events, but can be updated in future");
    });

    //France Step
    this.Given(/^a Tax Name of France TVA and a Tax code of SR has been set up in Cvent for any registraion product for an event$/, async () => {
        await console.log("Already setuped parameter in used events, but can be updated in future");
    });

    //German Step
    this.Given(/^a Tax Name of Gremany VAT and a Tax code of SR has been set up in Cvent for any registraion product for an event$/, async () => {
        await console.log("Already setuped parameter in used events, but can be updated in future");
    });

    //Netherlands Step
    this.Given(/^a Tax Name of Netherlands VAT and a Tax code of SR has been set up in Cvent for any registraion product for an event$/, async () => {
        await console.log("Already setuped parameter in used events, but can be updated in future");
    });

    //UAE Step
    this.Given(/^a Tax Name of UAE VAT and a Tax code of SR has been set up in Cvent for any registraion product for an event$/, async () => {
        await console.log("Already setuped parameter in used events, but can be updated in future");
    });

    //Portugal Step
    this.Given(/^a Tax Name of Portugal VAT and a Tax code of SR has been set up in Cvent for any registraion product for an event$/, async () => {
        await console.log("Already setuped parameter in used events, but can be updated in future");
    });


    //No Taxes Step
    this.Then(/^no tax code has been added to the EM Event in SF$/, async () => {
        await console.log("no tax code has been added to the EM Event in SF");
    });

    //Taxes Step
    this.Then(/^the same Tax Code SR has been added to the EM Event in SF$/, async () => {
        await console.log("Already setuped parameter in used events, but can be updated in future");
    });

     //No Taxes Step
     this.Then(/^I proceed to register for an No Tax event$/, async () => {
        responseObject = await event.taxRegistration(uniqueIndentifier, "noTax");
    });

    //United Kingdom Step
    this.Then(/^I proceed to register for an United Kingdom event$/, async () => {
        responseObject = await event.taxRegistration(uniqueIndentifier, "uk");
    });

    //France Step
    this.Then(/^I proceed to register for an France event$/, async () => {
        responseObject = await event.taxRegistration(uniqueIndentifier, "france");
    });

    //German Step
    this.Then(/^I proceed to register for an German event$/, async () => {
        responseObject = await event.taxRegistration(uniqueIndentifier, "germany");
    });

    //Netherlands Step
    this.Then(/^I proceed to register for an Netherlands event$/, async () => {
        responseObject = await event.taxRegistration(uniqueIndentifier, "netherlands");
    });

    //UAE Step
    this.Then(/^I proceed to register for an UAE event$/, async () => {
        responseObject = await event.taxRegistration(uniqueIndentifier, "uae");
    });

    //Portugal Step
    this.Then(/^I proceed to register for an Portugal event$/, async () => {
        responseObject = await event.taxRegistration(uniqueIndentifier, "portugal");
    });

    this.Then(/^the content of the Json will be:$/, async (table) => {
        //Verify POST response with chai assertions
        const input = table.hashes();

        for (const item of input) {
            await eval(`expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.taxes[0].${item.Field})).to.eventually.have.string("${item.Value}");`);
        }
    });
}