import { browser } from "protractor";
import { BrowserHacks } from "../../support/browserHacks";
import { EventPage } from "../pageObjects/event.page";
import chai = require('chai');

export = function gdprSteps() {

    //Default cucumber timeout
    this.setDefaultTimeout(600 * 1000);

    //Loading browser hacks
    let browserHacks = new BrowserHacks;

    //Loading Event Page Object
    let event = new EventPage;

    //Shared variable for unique identifier    
    let uniqueIndentifier: string;

    //Swagger API Caller
    let responseObject: any;

    //Chai-as-Promised setup
    chai.use(require('chai-as-promised'));
    const expect = chai.expect;

    //Hooks
    this.Before(async () => {
        let d = new Date;
        uniqueIndentifier = `${await d.getFullYear()}${await d.getMonth()}${await d.getDate()}${await d.getHours()}${await d.getMinutes()}${await d.getSeconds()}1`;
        //For debugging in case of fails
        await console.log(`Your autogenerated unique e-mail is 'emsautomation${uniqueIndentifier}@mailinator.com'`);
    });

    this.After(async () => {
        await browserHacks.ClearBrowserData();
    });

    //Step Definitions
    this.Given(/^a user register for an event in Cvent$/, async () => {
        //Generating unique identifier
        await browser.navigate().to(browser.baseUrl);
        await event.Loaded();
        await browser.navigate().to(browser.baseUrl);
        await event.Loaded();
        await event.StartRegister();
    });

    this.Then(/^he selects at Personal Information page$/, async (table) => {
        await event.GDPRRegisterSingleAttendee(uniqueIndentifier, table);
    });

    this.Then(/^the data is passed to SF$/, async () => {
        responseObject = await event.processEvent(uniqueIndentifier, "7f3130ae-87f4-48c2-a0b0-84b7250f3cf9");
    });

    this.Then(/^the following values will be present in the Json$/, async (table) => {
        //Verify POST response with chai assertions
        const input = table.hashes();

        for (const item of input) {
            await eval(`expect(Promise.resolve(JSON.parse(responseObject)[0].salesforce_request.primaryContact.${item.Field})).to.eventually.be.${item.Value};`);
        }
    });
}